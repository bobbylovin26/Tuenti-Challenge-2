<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Strict//EN" "http://www.w3.org/TR/xhtml1/DTD/xhtml1-strict.dtd">
<!-- saved from url=(0034)https://contest.tuenti.net/Contest -->
<html xmlns="http://www.w3.org/1999/xhtml"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	
	<title>Tuenti Programming Challenge 2</title>
	<link rel="stylesheet" type="text/css" href="./challenge_files/contest2.css">
</head>
<body>
<div class="canvas">

<a href="https://contest.tuenti.net/"><h1 class="main-claim">Tuenti Programming <br>Challenge <span>2</span></h1></a>
<a href="http://www.tuenti.com/" title="Go to tuenti"><i class="logotuenti">Go to tuenti</i></a>
<div class="body">
 
	<form id="logout_form" action="https://contest.tuenti.net/Login/logout" method="post"><input type="hidden" name="csrf" value="f10d9232ab68e33544bb55876d242fba"></form>
	<h2 class="promo">
		&nbsp;
		<span>
		<a href="https://contest.tuenti.net/">Home</a>&nbsp;
		<a href="https://contest.tuenti.net/Info/about">Info</a>&nbsp;
		<a href="./challenge_files/challenge.htm">Contest</a>&nbsp;
		<a href="https://contest.tuenti.net/Stats">Stats</a>&nbsp;
		<a href="https://contest.tuenti.net/Info/tools">Tools</a>&nbsp;
		<a href="https://contest.tuenti.net/Info/sample">Sample</a>&nbsp;
		<a href="https://contest.tuenti.net/Info/help">Help</a>&nbsp;
		&nbsp; &nbsp; &nbsp;
		<a href="javascript:document.getElementById('logout_form').submit();">Logout</a>
		</span>
	</h2>

<div class="promo center">
Contest ends on 2012-05-06 @ 13:37. <b><span id="timer">690347</span> seconds</b> left...
</div>

<script type="text/javascript">
var target = 1336304220;
var serverTimeDeviation = 1335613825795 - (new Date()).getTime();
function updateTimer() {
	var seconds = Math.round(target - ((new Date()).getTime() + serverTimeDeviation)/1000);
	if (seconds < 0) {
		seconds = 0;
	} else {
		setTimeout('updateTimer()', 1000);
	}
	document.getElementById('timer').innerHTML = seconds;
}
setTimeout('updateTimer()', 1000);
</script>
<div class="content">


<h2>Challenge 6: <strong>Cross-stitched fonts</strong></h2>
<br>
<div class="center">
	<img src="./challenge_files/stitchedtuenti.jpg" alt="Stitched tuenti" width="300" height="154" align="bottom" border="0">
</div>
<p>If geeks had to pick their favourite embroidery technique, there is no doubts that <strong>cross-stitch</strong> would be the chosen one: it’s all about pixels, fabric resolution and sprites!  So, to celebrate National Craft Week we are going to cross-stitch messages to decorate handmade cards that will then be sold to raise funds for orphan sheep in New Zealand. </p>

<p>Materials for cross-stitching are quite simple: cloth, a needle and thread. There are many kinds of fabrics for cross-stitching, all of them available in different resolutions or <em>counts</em>. The <strong>count (ct)</strong> is the number of pixels (or stitches) per inch of cloth, for example, 14ct indicates 14 pixels per inch.</p>

<div style="float:right;">
	<img src="./challenge_files/aida14.jpg" alt="Stitched tuenti" height="146" width="160" align="bottom" border="0">
</div>

<p>We have some rectangular fabric pieces and messages to stitch, and we want to use all possible space with maximum font size (measured in pixels or stitches) without splitting words across lines. As good geeks, we will use a monospace font for the message, therefore all characters, including whitespaces, take up the same space (both in vertical and horizontal). We must leave a whitespace between words, but we will <strong>not</strong> leave any between different lines.</p>

<p>In order to buy enough thread, we have estimated that <strong>each stitch uses <em>1/(fabric ct)</em> inches of thread</strong>, and that the <strong>average number of stitches per character (except the whitespace!)</strong> is <em>(font size)<sup>2</sup>/2</em>. For example, if we use a 14ct fabric with a font size of 14, then each character will use an average of 7’’ of thread.</p> 

<p>Your task is to compute the minimum amount of thread we need to order. We cannot order fractions of an inch, that is, if we need 16.6'' of thread, we will order 17''.</p>

<h3>Input</h3>
<p>The first line of the input gives the number of test cases, C, and C test cases follow. Each test case consists of 2 lines. The first one contains 3 integers, W, H and ct, indicating respectively width, height (in inches) and count of the piece of fabric. The next line contains the message we want to stitch. The text can contain digits, upper and lower-case letters, space characters (but no tabs or newlines) and some symbols:</p>
<code>
	0-9 a-z A-Z <pre>!"#$%&amp;'()*+,-./:;&lt;=&gt;?@[] ^_`{|}~ </pre>
</code>	
The text will not start with whitespaces, nor will there be two adjacent space characters.

<br>

<h3>Output</h3>
<p>For each test case, output one line containing "Case #x: P", where x is the case number (starting from 1) and P is the minimum thread length (in inches) we would need if we stitched the message using the maximum size possible for the characters. If it’s not possible to fit the message, output 0.</p>

<h3>Limits</h3>
1 ≤ C ≤ 30 <br>
1 ≤ W, H, characters in message ≤ 5000 <br>
1 ≤ ct ≤ 100 <br>

<h3>Sample input</h3>
<code>
	2 <br>
	10 3 2 <br>
	tuenti ;) <br>
	10 2 10 <br>
	god is a sheep
</code>

<h3>Sample output</h3>

<code>
	Case #1: 18 <br>
	Case #2: 55
</code>

<h2>Submit &amp; test your code</h2>
<p>To test and submit code we provide a set of tools to help you. Download
<a href="https://contest.tuenti.net/Info/tools">contest tools</a> if you haven't already done that. You will then be able to test and submit your solution to this
challenge with the challenge token.</p>
<code>Challenge token: GwPzi4AKgSuZ4KafTLwS</code>
<br>
<h3>To test your program</h3>
<code>./test_challenge GwPzi4AKgSuZ4KafTLwS path/program</code>
<p>A nice output will tell you if your program got the right solution or not. You can try as
many times as you need.</p>
<h3>To submit your program to the challenge</h3>
<code>./submit_challenge GwPzi4AKgSuZ4KafTLwS path/source_pkg.tgz path/program</code>
<p>Note that you first need to solve the test phase before submitting the code. During the submit phase we
might give your program harder questions, so try to make your program failsafe.</p>
<p>Remember <b>you can only submit once!</b> Once your solution is submitted you won't be able to amend it to fix issues or make it faster,
so please be sure your program is finished before submitting it.</p>
<p>If you have any doubts, please check the <a href="https://contest.tuenti.net/Info/help">help section</a>.</p>


<h2>Go ahead</h2>
<h3>I'm done! :)</h3>
<p>Once you have submitted your code, hit refresh and continue to next challenge.</p>
<h3>I'm stuck! :(</h3>
<p>Be sure you follow the <a href="http://twitter.com/#!/TuentiEng">Tuenti Engineering</a> twitter for updates and
possible hints during the contest.</p>
<p>If this challenge is too hard and you are blocked, you will be able to skip it after two hours. Note that
<strong>you won't be able to complete it later</strong>, and you have a limited number of challenges to skip.</p>
<p>Finally, if you run out of skips but are still really stuck with one problem, you will be able to skip it after 24 hours.</p>
<br>
<h3>Challenge status:</h3>
<div id="status">
 
<table class="status">
<tbody>
<tr>
	<th>Test case</th>
	<td><span>
		Not done	</span></td>
</tr>
<tr>
	<th>Solution submitted</th>
        <td><span>
                Not done        </span></td>
</tr>
<tr>
	<th>Skip</th>
	<td>You still have to wait 0h, 30m and 0s to be able to skip this challenge</td>
</tr>

</tbody>
</table>
</div>
<br>
<br>
<script type="text/javascript" src="./challenge_files/XMLHttpRequest.js"></script>
<script type="text/javascript">
<!--
function refreshStatus() {
	var el = document.getElementById('status');
	el.innerHTML = '<div class="center"><img src="loading.gif" style="border:0" /></div>';
	var req = new XMLHttpRequest();
	req.open('GET', '/Contest/status?id=6', true);
	req.onreadystatechange	= function() {
			if (this.readyState == XMLHttpRequest.DONE && this.status == 200) {
				el.innerHTML = this.responseText;
			}
		}
	req.send(null);
}
// -->
</script>
<div class="center">
	<button class="nButton lButton nSend" onclick="refreshStatus()"><span>Refresh status</span></button>
</div>
</div>
<div class="content center">
	<hr>
	<div class="sharing">
		<a href="http://www.twitter.com/#!/TuentiEng" target="_blank" title="Follow Tuenti Engineering on Twitter!"><i class="btwitter">Follow Tuenti Engineering on Twitter</i></a>
		<a href="http://www.tuenti.com/share?url=https%3A%2F%2Fcontest.tuenti.net%2F" target="_blank" title="Share Tuenti Programming Contest in Tuenti!"><i class="btuenti">Share Tuenti Programming Contest in Tuenti</i></a>
	</div>
	<p class="center">
		Tweet about this! <a href="https://twitter.com/intent/tweet?hashtags=TuentiChallenge&source=tweetbutton" target="_blank" title="Tweet about this!">#TuentiChallenge</a>
	</p>
</div>

</div></div>

<i class="footer">&nbsp;</i>
 
 
</body><link rel="stylesheet" type="text/css" href="data:text/css,"></html>